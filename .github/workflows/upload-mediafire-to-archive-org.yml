name: Download with Custom Script and Upload to Archive.org

on:
  workflow_dispatch:
    inputs:
      mediafire_urls:
        description: 'One or more space-separated MediaFire URLs (file or folder)'
        required: true
      archive_title:
        description: 'Title for the Archive.org item'
        required: true
      archive_page_url_id:
        description: 'Page URL ID for the Archive.org item (auto-generated if empty)'
        required: false
      archive_description:
        description: 'Description for the Archive.org item'
        required: false
        default: 'Archived from MediaFire'
      archive_subject_tags:
        description: 'Comma-separated subject tags for the Archive.org item'
        required: false
      archive_collection_id:
        description: 'Archive.org collection ID'
        required: false
        default: 'opensource_media'
      is_test_item:
        description: 'Set to "true" for a test item upload'
        required: false
        default: 'false'

jobs:
  download-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository to access script
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bs4 requests tqdm internetarchive lxml

      - name: Download Files using provided script
        run: python script/mediafire-dl.py "${{ github.event.inputs.mediafire_urls }}"

      - name: Create Archive.org Config File
        run: |
          mkdir -p ~/.config/internetarchive
          cat <<EOF > ~/.config/internetarchive/ia.ini
          [s3]
          access = ${{ secrets.IA_ACCESS_KEY }}
          secret = ${{ secrets.IA_SECRET_KEY }}
          EOF

      - name: Set Archive.org identifier
        id: set_identifier
        run: |
          if [ -z "${{ github.event.inputs.archive_page_url_id }}" ]; then
            # Use nanoseconds for a more unique ID
            echo "identifier=$(date +%s%N)" >> $GITHUB_OUTPUT
          else
            echo "identifier=${{ github.event.inputs.archive_page_url_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare and Upload to Archive.org
        run: |
          # First, determine which collection to use
          COLLECTION="${{ github.event.inputs.archive_collection_id }}"
          if [ "${{ github.event.inputs.is_test_item }}" = "true" ]; then
            COLLECTION="test_collection"
          fi
          
          # Next, find all downloaded files and folders to upload
          UPLOAD_ITEMS=$(ls -A | grep -vE '^\.git|^\.github|^script|^README\.md')
          if [ -z "$UPLOAD_ITEMS" ]; then
            echo "No new files or folders found to upload."
            exit 1
          fi
          echo "Uploading the following items:"
          echo "$UPLOAD_ITEMS"

          # Finally, run the upload command with all variables in the same script
          ia upload ${{ steps.set_identifier.outputs.identifier }} $UPLOAD_ITEMS \
            --metadata="title:${{ github.event.inputs.archive_title }}" \
            --metadata="description:${{ github.event.inputs.archive_description }}" \
            --metadata="subject:${{ github.event.inputs.archive_subject_tags }}" \
            --metadata="collection:${COLLECTION}"