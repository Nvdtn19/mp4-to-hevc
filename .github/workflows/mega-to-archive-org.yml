name: Mega to Archive.org Uploader

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      mega_link:
        description: 'Public MEGA Folder or File Link'
        required: true
        default: 'https://mega.nz/file/vyYAkJRZ#ILSnP8DK5-j7UYImkkdAuVomLLlO2bW8hBKMel-zovA'
      archive_identifier:
        description: 'Archive.org Item ID (must be unique)'
        required: true
        default: 'global-metadata-bak'
      archive_title:
        description: 'Page Title'
        required: true
        default: 'global-metadata-bak'
      archive_collection:
        description: 'Select the Archive.org Collection'
        type: choice
        required: true
        default: 'communitydata'
        options:
          - communitydata
          - community_texts
          - community_audio
          - community_movies
          - community_software
          - community_images
          - community
      archive_license:
        description: 'Select the License'
        type: choice
        required: true
        default: 'CC0 - No Rights Reserved'
        options:
          - 'CC0 - No Rights Reserved'
          - 'Creative Commons: Attribution 4.0'
          - 'Creative Commons: Attribution-ShareAlike 4.0'
          - 'Creative Commons: Attribution-NonCommercial 4.0'
          - 'Creative Commons: Attribution-NonCommercial-ShareAlike 4.0'
          - 'Public Domain Mark 1.0'
          - 'Leave license blank'
      test_item:
        description: 'Is this a test item?'
        type: choice
        required: true
        default: 'No'
        options:
          - 'No'
          - 'Yes'
      archive_description:
        description: 'Item Description'
        required: false
        default: 'Backup of content from a public MEGA link.'
      archive_subjects:
        description: 'Subject Tags (comma-separated)'
        required: false
        default: 'backup, data, archive'
      archive_creator:
        description: 'Content Creator'
        required: false
      archive_date:
        description: 'Publish Date (YYYY-MM-DD)'
        required: false
        # The action will automatically use the current date if this is left blank
        default: ''

jobs:
  download-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install MEGAcmd
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://mega.nz/linux/repo/xUbuntu_22.04/amd64/megacmd_1.6.3-1.1_amd64.deb -O megacmd.deb
          sudo dpkg -i megacmd.deb
          sudo apt-get -f install -y

      - name: Download Content from MEGA
        run: |
          echo "Starting download from MEGA..."
          mkdir ./download_content
          megacmd get "${{ github.event.inputs.mega_link }}" ./download_content

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Internet Archive Client
        run: pip install internetarchive

      - name: Set Current Date if Not Provided
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Build Upload Command
        id: build_command
        run: |
          # Start with the base command, using single quotes for the identifier to be safe.
          CMD="ia upload '${{ github.event.inputs.archive_identifier }}' ./download_content/*"

          # Add standard metadata by appending to the command string.
          # We escape the double quotes within the command.
          CMD="$CMD --metadata=\"title:${{ github.event.inputs.archive_title }}\""
          CMD="$CMD --metadata=\"collection:${{ github.event.inputs.archive_collection }}\""
          CMD="$CMD --metadata=\"description:${{ github.event.inputs.archive_description }}\""
          CMD="$CMD --metadata=\"subject:${{ github.event.inputs.archive_subjects }}\""
          CMD="$CMD --metadata=\"creator:${{ github.event.inputs.archive_creator }}\""
          
          # Add date (use current if not provided)
          DATE="${{ github.event.inputs.archive_date || steps.date.outputs.date }}"
          CMD="$CMD --metadata=\"date:$DATE\""
          
          # Handle the 'Test Item' flag based on user input
          if [ "${{ github.event.inputs.test_item }}" == "Yes" ]; then
            CMD="$CMD --metadata=\"test-item:yes\""
          fi
          
          # Determine the license URL from the user's dropdown choice
          LICENSE_URL=""
          case "${{ github.event.inputs.archive_license }}" in
            "CC0 - No Rights Reserved")
              LICENSE_URL="http://creativecommons.org/publicdomain/zero/1.0/" ;;
            "Creative Commons: Attribution 4.0")
              LICENSE_URL="http://creativecommons.org/licenses/by/4.0/" ;;
            "Creative Commons: Attribution-ShareAlike 4.0")
              LICENSE_URL="http://creativecommons.org/licenses/by-sa/4.0/" ;;
            "Creative Commons: Attribution-NonCommercial 4.0")
              LICENSE_URL="http://creativecommons.org/licenses/by-nc/4.0/" ;;
            "Creative Commons: Attribution-NonCommercial-ShareAlike 4.0")
              LICENSE_URL="http://creativecommons.org/licenses/by-nc-sa/4.0/" ;;
            "Public Domain Mark 1.0")
              LICENSE_URL="http://creativecommons.org/publicdomain/mark/1.0/" ;;
          esac
          
          # Add the license URL metadata only if a license was selected
          if [ -n "$LICENSE_URL" ]; then
            CMD="$CMD --metadata=\"licenseurl:$LICENSE_URL\""
          fi
          
          # Write the fully constructed command into a temporary script file
          echo "#!/bin/bash" > ./upload_script.sh
          echo "$CMD" >> ./upload_script.sh
          chmod +x ./upload_script.sh

      - name: Upload Content to Archive.org
        env:
          # Authenticate using the secrets stored in the repository
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
        run: |
          echo "The following command will be executed:"
          cat ./upload_script.sh
          echo "---"
          # Execute the script containing the full command
          ./upload_script.sh

      - name: âœ… All Done!
        run: |
          echo "Upload complete!"
          echo "Access your item at: https://archive.org/details/${{ github.event.inputs.archive_identifier }}"